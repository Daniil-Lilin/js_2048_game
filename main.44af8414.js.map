{"version":3,"sources":["scripts/main.js"],"names":["rows","columns","score","board","gameField","document","querySelector","btnStart","scoreField","messageStart","messageWin","messageLose","startGame","addRandomTile","btnRestart","hasSpace","value","Math","random","randomRow","floor","randomColumn","updateBoard","some","row","includes","i","j","cell","cells","num","textContent","classList","add","checkWin","isLost","remove","handleArrows","e","copyBoard","JSON","stringify","key","moveUp","moveDown","moveLeft","moveRight","move","onlyNums","filter","isFinite","updateScore","length","push","rotadeBoard","items","revesedBoard","column","rotatedBoard","rotatedBackBoard","map","item","rotatedBoardBoard","reverse","style","fontSize","sameTileInRow","sameTileInColumn","addEventListener"],"mappings":"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","file":"main.44af8414.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst rows = 4;\nconst columns = 4;\nlet score = 0;\nlet board = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nconst gameField = document.querySelector('.game-field');\nconst btnStart = document.querySelector('.button.start');\nconst scoreField = document.querySelector('.game-score');\nconst messageStart = document.querySelector('.message.message-start');\nconst messageWin = document.querySelector('.message.message-win');\nconst messageLose = document.querySelector('.message.message-lose');\n\nbtnStart.addEventListener('click', startGame);\n\nfunction startGame() {\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  score = 0;\n\n  addRandomTile();\n  addRandomTile();\n  btnRestart();\n}\n\nfunction addRandomTile() {\n  const value = Math.random() < 0.9 ? 2 : 4;\n\n  while (hasSpace()) {\n    const randomRow = Math.floor(Math.random() * rows);\n    const randomColumn = Math.floor(Math.random() * columns);\n\n    if (board[randomRow][randomColumn] === 0) {\n      board[randomRow][randomColumn] = value;\n      break;\n    }\n  }\n\n  updateBoard();\n}\n\nfunction hasSpace() {\n  return board.some(row => row.includes(0));\n}\n\nfunction updateBoard() {\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < columns; j++) {\n      const cell = gameField.rows[i].cells[j];\n      const num = board[j][i];\n\n      cell.textContent = '';\n      cell.classList.value = '';\n      cell.classList.add('field-cell');\n\n      if (num > 0) {\n        cell.textContent = num;\n\n        if (num <= 2048) {\n          cell.classList.add(`field-cell--${num}`);\n        }\n      }\n    }\n  }\n\n  checkWin();\n\n  if (isLost()) {\n    messageLose.classList.remove('hidden');\n  }\n}\n\ndocument.addEventListener('keydown', handleArrows);\n\nfunction handleArrows(e) {\n  const copyBoard = JSON.stringify(board);\n\n  switch (e.key) {\n    case 'ArrowUp':\n      moveUp();\n      break;\n\n    case 'ArrowDown':\n      moveDown();\n      break;\n\n    case 'ArrowLeft':\n      moveLeft();\n      break;\n\n    case 'ArrowRight':\n      moveRight();\n      break;\n  }\n\n  if (copyBoard !== JSON.stringify(board)) {\n    addRandomTile();\n  }\n  updateBoard();\n}\n\nfunction move(row) {\n  let onlyNums = row.filter(num => num !== 0);\n\n  for (let i = 0; i < rows; i++) {\n    if (onlyNums[i] === onlyNums[i + 1] && isFinite(onlyNums[i])) {\n      onlyNums[i] *= 2;\n      onlyNums[i + 1] = 0;\n\n      updateScore(onlyNums[i]);\n    }\n  }\n\n  onlyNums = onlyNums.filter(num => num !== 0);\n\n  while (onlyNums.length < rows) {\n    onlyNums.push(0);\n  }\n\n  return onlyNums;\n}\n\nfunction rotadeBoard(items) {\n  const revesedBoard = [];\n\n  for (let i = 0; i < rows; i++) {\n    const column = [];\n\n    for (let j = 0; j < columns; j++) {\n      column.push(items[i][j]);\n    }\n\n    revesedBoard.push(column);\n  }\n\n  return revesedBoard;\n}\n\nfunction moveUp() {\n  const rotatedBoard = rotadeBoard(board);\n\n  const moved = rotatedBoard.map(item => move(item));\n\n  const rotatedBackBoard = rotadeBoard(moved);\n\n  for (let i = 0; i < rows; i++) {\n    board[i] = rotatedBackBoard[i];\n  }\n}\n\nfunction moveDown() {\n  const rotatedBoard = rotadeBoard(board);\n  const reversedBoard = rotatedBoard.map(item => item.reverse());\n  const moved = reversedBoard.map(item => move(item));\n  const reversedBackBoard = moved.map(item => item.reverse());\n\n  const rotatedBoardBoard = rotadeBoard(reversedBackBoard);\n\n  for (let i = 0; i < rows; i++) {\n    board[i] = rotatedBoardBoard[i];\n  }\n}\n\nfunction moveLeft() {\n  for (let i = 0; i < columns; i++) {\n    let row = [board[0][i], board[1][i], board[2][i], board[3][i]];\n\n    row = move(row);\n\n    for (let j = 0; j < rows; j++) {\n      board[j][i] = row[j];\n    }\n  }\n}\n\nfunction moveRight() {\n  for (let i = 0; i < columns; i++) {\n    let row = [board[0][i], board[1][i], board[2][i], board[3][i]];\n\n    row = move(row.reverse());\n    row = row.reverse();\n\n    for (let j = 0; j < rows; j++) {\n      board[j][i] = row[j];\n    }\n  }\n}\n\nfunction updateScore(num) {\n  score += num;\n  scoreField.textContent = score;\n}\n\nfunction btnRestart() {\n  messageStart.classList.add('hidden');\n  btnStart.textContent = 'Restart';\n  btnStart.style.fontSize = '18px';\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  score = 0;\n  scoreField.textContent = score;\n}\n\nfunction checkWin() {\n  const win = board.some(row => row.includes(2048));\n\n  if (win) {\n    messageWin.classList.remove('hidden');\n  }\n}\n\nfunction isLost() {\n  if (hasSpace()) {\n    return false;\n  }\n\n  if (sameTileInRow() || sameTileInColumn()) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction sameTileInRow() {\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < columns - 1; j++) {\n      if (board[i][j] === board[i][j + 1]) {\n        return true;\n      }\n    }\n  }\n}\n\nfunction sameTileInColumn() {\n  for (let i = 0; i < columns; i++) {\n    for (let j = 0; j < rows - 1; j++) {\n      if (board[j][i] === board[j + 1][i]) {\n        return true;\n      }\n    }\n  }\n}\n"]}